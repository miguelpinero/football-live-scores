{"version":3,"sources":["components/shared/MatchesList/MatchesList.js","components/shared/Loader/Loader.js","config.js","lib/buildURL.js","lib/matchesParser.js","services/liveScoreSevice.js","components/pages/PastMatches/PastMatches.js","components/pages/UpcomingMatches/UpcomingMatches.js","components/pages/LiveMatches/CustomCardHeader.js","components/pages/LiveMatches/EmptyView.js","components/pages/LiveMatches/LiveMatches.js","lib/useInterval.js","components/pages/Home/Home.js","serviceWorker.js","index.js"],"names":["MatchesList","matches","children","map","match","index","cardClassnames","classnames","isHomeWinner","isAwayWinner","cardHeader","date","scheduled","time","location","span","key","className","homeName","homeScore","awayName","awayScore","Loader","size","API_KEY","API_SECRET","buildURL","baseUrl","options","env","Object","keys","join","matchesParser","dataParser","data","sort","a","b","epoch","home_name","away_name","score","status","split","moment","format","unix","FROM","TO","COMPETITION_ID","PAST_MATCHES_URL","UPCOMING_MATCHES_URL","LIVE_MATCHES_URL","fetchLiveMatches","url","competition_id","fetch","then","response","json","fetchUpcomingMatches","fixtures","Content","Layout","PastMatches","useState","setMatches","isLoading","setIsLoading","useEffect","from","to","fetchPastMatches","matchesInformation","CustomCardHeader","isMatchLive","cardHeaderClassnames","live","EmptyView","history","useHistory","title","extra","type","onClick","push","LiveMatches","isFirstLoad","setIsFirstLoad","liveMatches","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","length","Item","Menu","Header","menuOrder","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","useLocation","selectedKey","pathname","theme","mode","selectedKeys","exact","path","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.925e9a59.chunk.js","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { Row, Col, Card } from \"antd\";\nimport \"./MatchesList.css\";\n\nexport default function MatchesList({ matches, children }) {\n  return (\n    <Row>\n      {matches.map((match, index) => {\n        const cardClassnames = classnames(\"Matches-card\", {\n          \"home-winner\": match.isHomeWinner,\n          \"away-winner\": match.isAwayWinner\n        });\n\n        const cardHeader = children ? (\n          children(match)\n        ) : (\n          <span>\n            {match.date}, {match.scheduled || match.time} - {match.location}\n          </span>\n        );\n\n        return (\n          <Col span={8} key={index}>\n            <Card className={cardClassnames}>\n              <div className=\"GeneralInformation\">{cardHeader}</div>\n              <div className=\"TeamInformation home-information\">\n                <span className=\"TeamName\">{match.homeName}</span>\n                <span className=\"Score\">{match.homeScore}</span>\n              </div>\n              <div className=\"TeamInformation away-information\">\n                <span className=\"TeamName\">{match.awayName}</span>\n                <span className=\"Score\">{match.awayScore}</span>\n              </div>\n            </Card>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n}\n","import React from \"react\";\nimport { Spin } from \"antd\";\nimport \"./Loader.css\";\n\nexport default function Loader() {\n  return (\n    <div className=\"Loader\">\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n","export default {\n  API_KEY: \"63d7vYi0UqDtThZY\",\n  API_SECRET: \"LC2OdaebpsLje66kajrGhKGcbjG5AF3m\"\n};\n","import env from \"../config\";\n\nexport function buildURL(baseUrl, options) {\n  const url = `${baseUrl}?key=${env.API_KEY}&secret=${env.API_SECRET}`;\n\n  const params = Object.keys(options)\n    .map(key => `&${key}=${options[key]}`)\n    .join(\"\");\n\n  return url + params;\n}\n","import moment from \"moment\";\n\nexport function upcomingMatchesParser({ data: { fixtures: matches } }) {\n  return dataParser(matches).sort((a, b) => a.epoch - b.epoch);\n}\n\nexport function matchesParser({ data: { match: matches } }) {\n  return dataParser(matches).sort((a, b) => b.epoch - a.epoch);\n}\n\nfunction dataParser(matches) {\n  return matches.map(match => {\n    const {\n      home_name: homeName,\n      away_name: awayName,\n      score,\n      location,\n      date,\n      scheduled,\n      status,\n      time\n    } = match;\n\n    const [homeScore, awayScore] = score ? score.split(\" - \") : [\"-\", \"-\"];\n    const [isHomeWinner, isAwayWinner] = [\n      homeScore > awayScore,\n      awayScore > homeScore\n    ];\n\n    return {\n      homeName,\n      awayName,\n      homeScore,\n      awayScore,\n      isHomeWinner,\n      isAwayWinner,\n      location,\n      status,\n      time,\n      date: moment(date).format(\"MMM Do\"),\n      epoch: moment(date).unix(),\n      scheduled\n    };\n  });\n}\n","import { buildURL } from \"../lib/buildURL\";\nimport { upcomingMatchesParser, matchesParser } from \"../lib/matchesParser\";\n\nconst FROM = \"2019-11-01\";\nconst TO = \"2019-11-27\";\nconst COMPETITION_ID = \"244\";\nconst PAST_MATCHES_URL = \"/api-client/scores/history.json\";\nconst UPCOMING_MATCHES_URL = \"/api-client/fixtures/matches.json\";\nconst LIVE_MATCHES_URL = \"/api-client/scores/live.json\";\n\nexport function fetchPastMatches(from = FROM, to = TO) {\n  const url = buildURL(PAST_MATCHES_URL, {\n    from,\n    to,\n    competition_id: COMPETITION_ID\n  });\n\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => matchesParser(data));\n}\n\nexport function fetchLiveMatches() {\n  const url = buildURL(LIVE_MATCHES_URL, {\n    competition_id: COMPETITION_ID\n  });\n\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => matchesParser(data));\n}\n\nexport function fetchUpcomingMatches() {\n  const url = buildURL(UPCOMING_MATCHES_URL, {\n    competition_id: COMPETITION_ID\n  });\n\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => upcomingMatchesParser(data));\n}\n","import React, { useEffect, useState } from \"react\";\nimport MatchesList from \"components/shared/MatchesList/MatchesList\";\nimport Loader from \"components/shared/Loader/Loader\";\nimport { fetchPastMatches } from \"services/liveScoreSevice\";\nimport { Layout } from \"antd\";\n\nconst { Content } = Layout;\n\nexport default function PastMatches() {\n  const [matches, setMatches] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetchPastMatches().then(matchesInformation => {\n      setMatches(matchesInformation);\n      setIsLoading(false);\n    });\n  }, []);\n\n  return (\n    <Layout className=\"Container\">\n      <Layout className=\"Content-wrapper\">\n        <Content className=\"Matches\">\n          {isLoading ? <Loader /> : <MatchesList matches={matches} />}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport MatchesList from \"components/shared/MatchesList/MatchesList\";\nimport Loader from \"components/shared/Loader/Loader\";\nimport { fetchUpcomingMatches } from \"services/liveScoreSevice\";\nimport { Layout } from \"antd\";\n\nconst { Content } = Layout;\n\nexport default function PastMatches() {\n  const [matches, setMatches] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetchUpcomingMatches().then(matchesInformation => {\n      setMatches(matchesInformation);\n      setIsLoading(false);\n    });\n  }, []);\n\n  return (\n    <Layout className=\"Container\">\n      <Layout className=\"Content-wrapper\">\n        <Content className=\"Matches\">\n          {isLoading ? <Loader /> : <MatchesList matches={matches} />}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport default function CustomCardHeader({ match }) {\n  const isMatchLive = match.status === \"IN PLAY\";\n\n  const cardHeaderClassnames = classnames(\"CardHeader\", {\n    live: isMatchLive\n  });\n  return (\n    <div className={cardHeaderClassnames}>\n      <span className=\"status\">{isMatchLive ? \"LIVE\" : match.status}</span>\n      {isMatchLive && <span> min {match.time} </span>}\n      <span> - {match.location} </span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Result, Button } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function EmptyView() {\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(\"/upcoming\");\n  }\n\n  return (\n    <Result\n      className=\"EmptyView\"\n      title=\"Oops, looks like there are no live matches.\"\n      extra={\n        <Button type=\"primary\" key=\"console\" onClick={handleClick}>\n          Go to upcoming matches\n        </Button>\n      }\n    />\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport MatchesList from \"components/shared/MatchesList/MatchesList\";\nimport Loader from \"components/shared/Loader/Loader\";\nimport useInterval from \"lib/useInterval\";\nimport CustomCardHeader from \"./CustomCardHeader\";\nimport EmptyView from \"./EmptyView\";\nimport { fetchLiveMatches } from \"services/liveScoreSevice\";\nimport { Layout } from \"antd\";\nimport \"./LiveMatches.css\";\n\nconst { Content } = Layout;\n\nexport default function LiveMatches() {\n  const [matches, setMatches] = useState([]);\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n  useEffect(() => {\n    fetchLiveMatches().then(liveMatches => {\n      setMatches(liveMatches);\n      setIsFirstLoad(false);\n    });\n  }, []);\n\n  useInterval(() => {\n    fetchLiveMatches().then(liveMatches => {\n      setMatches(liveMatches);\n    });\n  }, 50000);\n\n  return (\n    <Layout className=\"Container\">\n      <Layout className=\"Content-wrapper\">\n        <Content className=\"Matches\">\n          {isFirstLoad ? (\n            <Loader />\n          ) : matches.length > 0 ? (\n            <MatchesList matches={matches}>\n              {match => <CustomCardHeader match={match} />}\n            </MatchesList>\n          ) : (\n            <EmptyView />\n          )}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport PastMatches from \"components/pages/PastMatches\";\nimport UpcomingMatches from \"components/pages/UpcomingMatches\";\nimport LiveMatches from \"components/pages/LiveMatches\";\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\nimport { Layout, Menu } from \"antd\";\nimport \"./Home.css\";\n\nconst { Item } = Menu;\nconst { Header } = Layout;\n\nconst menuOrder = {\n  \"/upcoming\": \"2\",\n  \"/live\": \"3\"\n};\n\nexport default function Home() {\n  let location = useLocation();\n  const selectedKey = menuOrder[location.pathname] || \"1\";\n\n  return (\n    <div className=\"App\">\n      <Layout className=\"NavigationBar\">\n        <Header className=\"NavigationBar-header\">\n          <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[selectedKey]}>\n            <Item key=\"1\">\n              <Link to=\"/\">Past matches </Link>\n            </Item>\n            <Item key=\"2\">\n              <Link to=\"/upcoming\">Upcoming matches </Link>\n            </Item>\n            <Item key=\"3\">\n              <Link to=\"/live\">Live Matches</Link>\n            </Item>\n          </Menu>\n        </Header>\n        <Switch>\n          <Route exact path=\"/\">\n            <PastMatches />\n          </Route>\n          <Route path=\"/upcoming\">\n            <UpcomingMatches />\n          </Route>\n          <Route path=\"/live\">\n            <LiveMatches />\n          </Route>\n        </Switch>\n      </Layout>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./components/pages/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <Router>\n    <Home />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}